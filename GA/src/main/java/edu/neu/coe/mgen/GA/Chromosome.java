/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.neu.coe.mgen.GA;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author yumengwang and yuhan wang
 */
public class Chromosome extends JPanel implements Comparable {

    private ArrayList<Line> gene;//genetic expression
    private static int l = 329;//length og the image, adjust later
    private static int w = 281;//width of the image
    private double score = 0;//score of the image calculated, adjust later

    /**
     *
     * @param initialize a chromosome generated by genes of the pointed number
     */
    public Chromosome(int number) {
        if (number <= 0) {
            return;
        }
        setGene((ArrayList<Line>) new ArrayList(number));
        for (int i = 0; i < number; i++) {
            Line line = new Line(l,w);
            gene.add(line);
        }
    }

    public Chromosome() {

    }

    public static Chromosome clone(Chromosome chromosome) {
        if (chromosome.getGene() == null || chromosome == null) {
            return null;
        }
        Chromosome newchromo = new Chromosome();
        newchromo.setGene(new ArrayList<Line>());
        for (int i = 0; i < chromosome.getGene().size(); i++) {
            Line line = new Line(chromosome.getL(), chromosome.getW());
            newchromo.getGene().add(line);
        }
        for (int i = 0; i < chromosome.getGene().size(); i++) {
            newchromo.getGene().get(i).copyLine(chromosome.getGene().get(i));
        }
        return newchromo;
    }



    public static List<Chromosome> genetic(Chromosome chromosome1, Chromosome chromosome2) {
        if (chromosome1 == null || chromosome2 == null || chromosome1.getGene() == null || chromosome2.getGene() == null) {
            return null;
        }
        if (chromosome1.getGene().size() != chromosome2.getGene().size()) {
//no descent if two chromosome's gene size do not match  
            return null;
        }
        Chromosome c1 = clone(chromosome1);
        Chromosome c2 = clone(chromosome2);

        int s = c1.getGene().size();
        int m = ((int) (Math.random() * s)) ;
        int n = ((int) (Math.random() * s)) ;
        int min, max;
        if (m > n) {
            min = n;
            max=m;
        } else {
            min = m;
             max = n;
        }
        Line d = new Line(l, w);
        for (int i = min; i <= max; i++) {
            d.copyLine(c1.getGene().get(i));
            c1.getGene().get(i).copyLine(c2.getGene().get(i));
            c2.getGene().get(i).copyLine(d);
        }

        List<Chromosome> list = new ArrayList<>();
        list.add(c1);
        list.add(c2);
        return list;

    }

    public void mutation(int n) {
        for (int i = 0; i < n; i++) {
            int position = ((int) (Math.random() * getGene().size()));
            Line line = new Line(l, w);
            gene.get(position).copyLine(line);
        }
    }

    /**
     * @Override * @param o
     * @return
     */
    public int compareTo(Object o) {
        Chromosome chmo = (Chromosome) o;
        if(score>chmo.getScore())
            return -1;
        return 1;
        
    }

    /**
     * @return the gene
     */
    public ArrayList<Line> getGene() {
        return gene;
    }

    /**
     * @param gene the gene to set
     */
    public void setGene(ArrayList<Line> gene) {
        this.gene = gene;
    }

    /**
     * @return the l
     */
    public static int getL() {
        return l;
    }

    /**
     * @param aL the l to set
     */
    public static void setL(int aL) {
        l = aL;
    }

    /**
     * @return the w
     */
    public static int getW() {
        return w;
    }

    /**
     * @param aW the w to set
     */
    public static void setW(int aW) {
        w = aW;
    }

    /**
     * @return the score
     */
    public double getScore() {
        return score;
    }

    /**
     * @param score the score to set
     */
    public void setScore(double score) {
        this.score = score;
    }

}
